<?php

namespace concepture\yii2handbook\web\controllers;

use concepture\yii2handbook\services\DynamicElementsService;
use Yii;
use yii\helpers\ArrayHelper;
use yii\filters\VerbFilter;
use concepture\yii2user\enum\UserRoleEnum;
use kamaelkz\yii2admin\v1\helpers\RequestHelper;
use concepture\yii2handbook\search\DynamicElementsSearch;
use concepture\yii2handbook\forms\DynamicElementsMultipleForm;
use concepture\yii2handbook\services\DomainService;

/**
 * @author Olzhas Kulzhambekov <exgamer@live.ru>
 */
class DynamicElementsController extends Controller
{
    /**
     * @inheritDoc
     */
    protected function getAccessRules()
    {
        return ArrayHelper::merge(
            parent::getAccessRules(),
            [
                [
                    'actions' => [
                        'interactive-mode'
                    ],
                    'allow' => true,
                    'roles' => [
                        UserRoleEnum::ADMIN
                    ],
                ]
            ]
        );
    }

    /**
     * @inheritDoc
     */
    public function behaviors()
    {
        return ArrayHelper::merge(
            parent::behaviors(),
            [
                'verbs' => [
                    'class' => VerbFilter::class,
                    'actions' => [
                        'interactive-mode' => ['POST'],
                    ],
                ],
            ]
        );
    }

    /**
     * @inheritDoc
     */
    public function beforeAction($action)
    {
        if(in_array($action->id, ['interactive-mode'])) {
            $this->enableCsrfValidation = false;
        }

        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    /**
     * @return DynamicElementsService
     */
    private function getDynamicElementsService()
    {
        return Yii::$app->dynamicElementsService;
    }

    /**
     * @return DomainService
     */
    private function getDomainService()
    {
        return Yii::$app->domainService;
    }

    /**
     * @inheritDoc
     */
    public function actions()
    {
        $actions = parent::actions();

        unset($actions['index'], $actions['update'], $actions['view']);

        return $actions;
    }

    /**
     * Список
     *
     * @return string HTML
     */
    public function actionIndex()
    {
        $searchModel = Yii::createObject(DynamicElementsSearch::class);
        $searchModel->load(Yii::$app->request->queryParams);
        $dataProvider =  $this->getDynamicElementsService()->getDataProviderGroupByHash($searchModel);

        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    /**
     * Редактирование пачкой
     *
     * @param string $hash
     * @param string $domainAlias
     */
    public function actionUpdate($hash, $domainAlias = null)
    {
        if($domainAlias && $domainAlias !== $this->getDomainService()->getCookie()) {
            $this->getDomainService()->setCookie($domainAlias);

            return $this->redirect(['update', 'hash' => $hash], 301);
        }

        $form = new DynamicElementsMultipleForm();
        $items = $this->getDynamicElementsService()->getAllByHash((string) $hash);
        foreach ($items as $item) {
            $form->setVirtualAttribute($item->name, $item->value);
            $form->setStringValidator($item->name, $item->caption);
        }

        if ($form->load(Yii::$app->request->post()) && $form->validate()) {
            $this->getDynamicElementsService()->updateMultiple($form);

            if(Yii::$app->request->post(RequestHelper::REDIRECT_BTN_PARAM)) {
                return $this->redirect(['index']);
            }
        }

        return $this->render('update', [
            'items' => $items,
            'model' => $form,
        ]);
    }

    /**
     * Интерактивный мод
     */
    public function actionInteractiveMode()
    {
        if(null === Yii::$app->request->post('value')) {
            return null;
        }

        return $this->getDynamicElementsService()->setInteractiveMode(Yii::$app->request->post('value'));
    }
}
